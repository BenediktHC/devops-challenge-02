pipeline {
    agent any
    
    environment {
        AWS_DEFAULT_REGION = 'eu-central-1'
    }

    stages {
        stage('Determine Environment') {
            steps {
                script {
                    switch(env.BRANCH_NAME) {
                        case 'main':
                            env.DEPLOY_ENV = 'prod'
                            env.SHOULD_DEPLOY = 'true'
                            break
                        case 'development':
                            env.DEPLOY_ENV = 'dev'
                            env.SHOULD_DEPLOY = 'true'
                            break
                        case ~/^hotfix\/.*/:
                            env.DEPLOY_ENV = 'prod'
                            env.SHOULD_DEPLOY = 'true'
                            break
                        case ~/^feature\/.*/:
                            env.DEPLOY_ENV = 'dev'
                            env.SHOULD_DEPLOY = 'false'
                            break
                        default:
                            error("Branch ${env.BRANCH_NAME} not supported")
                    }
                    echo "Branch: ${env.BRANCH_NAME}, Environment: ${env.DEPLOY_ENV}, Deploy: ${env.SHOULD_DEPLOY}"
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir("terraform/environments/${env.DEPLOY_ENV}") {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("terraform/environments/${env.DEPLOY_ENV}") {
                    sh 'terraform plan'
                }
            }
        }

        stage('Approval') {
            when {
                expression { env.SHOULD_DEPLOY == 'true' }
            }
            steps {
                input message: "Deploy to ${env.DEPLOY_ENV}?"
            }
        }

        stage('Apply') {
            when {
                expression { env.SHOULD_DEPLOY == 'true' }
            }
            steps {
                dir("terraform/environments/${env.DEPLOY_ENV}") {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Smoke Tests') {
            when {
                expression { env.SHOULD_DEPLOY == 'true' }
            }
            steps {
                script {
                    def webIps = sh(
                        script: "cd terraform/environments/${env.DEPLOY_ENV} && terraform output -json web_public_ips | jq -r 'join(\",\")'",
                        returnStdout: true
                    ).trim()
                    
                    def dbIp = sh(
                        script: "cd terraform/environments/${env.DEPLOY_ENV} && terraform output -raw db_private_ip",
                        returnStdout: true
                    ).trim()

                    sh """
                        chmod +x scripts/smoke-tests/run_tests.sh
                        scripts/smoke-tests/run_tests.sh ${env.DEPLOY_ENV} ${webIps} ${dbIp}
                    """
                }
            }
        }
    }
}